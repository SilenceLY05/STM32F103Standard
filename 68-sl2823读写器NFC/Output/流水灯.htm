<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\流水灯.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\流水灯.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Sep 20 21:14:11 2023
<BR><P>
<H3>Maximum Stack Usage =        808 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; nfc_demo &rArr; pcd_active &rArr; pcd_active_b &rArr; pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from sl2x23_if.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">fputc</a> from bsp_usart.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ef]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
</UL>

<P><STRONG><a name="[83]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
</UL>

<P><STRONG><a name="[fb]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
</UL>

<P><STRONG><a name="[ff]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[50]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_SPI_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_RST_IRQ_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[103]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[104]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadSR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadSR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Read
</UL>

<P><STRONG><a name="[107]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[53]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
</UL>

<P><STRONG><a name="[10e]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
</UL>

<P><STRONG><a name="[10f]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a6]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a7]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[111]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[a8]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[a3]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a4]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[115]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[11f]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
</UL>

<P><STRONG><a name="[a9]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[120]"></a>I2C_GetITStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_i2c.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[55]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[124]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[134]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_SPI_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_RST_IRQ_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[9e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
</UL>

<P><STRONG><a name="[4f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[135]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[58]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[13b]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[13e]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7f]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[145]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[14f]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>nfc_demo</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = nfc_demo &rArr; pcd_active &rArr; pcd_active_b &rArr; pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idcard_num
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Tag1_Test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iblock_getrand
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = main &rArr; nfc_demo &rArr; pcd_active &rArr; pcd_active_b &rArr; pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_default_info
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Para_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6b]"></a>nfc_demo_user</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Tag1_Test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[70]"></a>lpcd_demo</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init_LPCD
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SysTick_Init</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, bsp_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Delay_us</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lpcd_conf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_agc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_calib
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_sleep_exit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[5b]"></a>Delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_amp_test
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_typeA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Open
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_exit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iblock_getrand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[77]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[65]"></a>USART_Config</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[7e]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>

<P><STRONG><a name="[80]"></a>SL2x23_RST_IRQ_Config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SL2x23_RST_IRQ_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
</UL>

<P><STRONG><a name="[81]"></a>SL2x23_IRQ_EXTI_Config</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SL2x23_IRQ_EXTI_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SL2x23_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SL2x23_Init &rArr; SL2x23_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_I2C_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_IRQ_EXTI_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_RST_IRQ_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>write_reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_bak_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write_ultralight
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_print
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_lpcd_conf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_agc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_calib
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_amp_test
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lpcd_reg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_setagc_getadc
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_sleep_exit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_sleep
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_soft_poweroff_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl2x23_read_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_entry
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
</UL>

<P><STRONG><a name="[75]"></a>read_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = read_reg &rArr; i2c_read_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_print
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_amp_test
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lpcd_reg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sl2x23_read_reg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_exit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[8d]"></a>set_bit_mask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_bak_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write_ultralight
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
</UL>

<P><STRONG><a name="[8e]"></a>write_buf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sl2x23_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write
</UL>

<P><STRONG><a name="[90]"></a>read_buf</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sl2x23_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Read
</UL>

<P><STRONG><a name="[92]"></a>clear_bit_mask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_bak_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write_ultralight
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
</UL>

<P><STRONG><a name="[93]"></a>sl2x23_read_reg</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sl2x23_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[67]"></a>Communication_Test</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sl2x23_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Communication_Test &rArr; pcd_reset &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_CheckDevice
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>i2c_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[98]"></a>i2c_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
</UL>

<P><STRONG><a name="[99]"></a>i2c_SendByte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[9a]"></a>i2c_ReadByte</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[9b]"></a>i2c_WaitAck</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[9c]"></a>i2c_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[9d]"></a>i2c_NAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Delay
</UL>

<P><STRONG><a name="[88]"></a>SL2x23_I2C_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sl2x23_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SL2x23_I2C_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_Init
</UL>

<P><STRONG><a name="[a0]"></a>SL2x23_TIMEOUT_UserCallBack</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sl2x23_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_word
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_word
</UL>

<P><STRONG><a name="[8b]"></a>i2c_write_word</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, sl2x23_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_TIMEOUT_UserCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[8c]"></a>i2c_read_word</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, sl2x23_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = i2c_read_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_TIMEOUT_UserCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[95]"></a>i2c_CheckDevice</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, sl2x23_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = i2c_CheckDevice &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
</UL>

<P><STRONG><a name="[ab]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sl2x23_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_ReadSR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Read
</UL>

<P><STRONG><a name="[ae]"></a>DEV_ReadSR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sl2x23_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[8f]"></a>DEV_SPI_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sl2x23_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf
</UL>

<P><STRONG><a name="[91]"></a>DEV_SPI_Read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sl2x23_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_buf
</UL>

<P><STRONG><a name="[af]"></a>SL2x23_SPI_Config</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sl2x23_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[68]"></a>SL2x23_Para_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rfid_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>SL2x23_Para_Init_LPCD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rfid_interface.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>gtag_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gtag_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init_LPCD
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[69]"></a>Rfid_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Rfid_Init &rArr; pcd_init &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_soft_poweroff_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtag_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Rfid_Init_LPCD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtag_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[6e]"></a>pcd_polling_reqa</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_default_info
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
</UL>

<P><STRONG><a name="[b8]"></a>reqa_wakeup</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = reqa_wakeup &rArr; pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_default_info
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_typeA
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
</UL>

<P><STRONG><a name="[b9]"></a>reqb_wakeup</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = reqb_wakeup &rArr; pcd_request_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_slot_marker
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request_b
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_default_info
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
</UL>

<P><STRONG><a name="[bc]"></a>pcd_active_b</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = pcd_active_b &rArr; pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_attri_b
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
</UL>

<P><STRONG><a name="[be]"></a>Rfid_exchange</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Rfid_exchange &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iISO14443TransMit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iblock_getrand
</UL>

<P><STRONG><a name="[c0]"></a>iISO14443TransMit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_exchange
</UL>

<P><STRONG><a name="[c1]"></a>Rfid_Open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[c2]"></a>Rfid_Close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_off
</UL>

<P><STRONG><a name="[62]"></a>Iblock_getrand</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Iblock_getrand &rArr; Rfid_exchange &rArr; ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso14443_4_deselect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_exchange
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[c4]"></a>pcd_polling_typeA</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5d]"></a>pcd_polling</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = pcd_polling &rArr; reqa_wakeup &rArr; pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqb_wakeup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[61]"></a>pcd_active</STRONG> (Thumb, 138 bytes, Stack size 320 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = pcd_active &rArr; pcd_active_b &rArr; pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active_b
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[c8]"></a>pcd_transceive</STRONG> (Thumb, 626 bytes, Stack size 288 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read_tag2_block
</UL>

<P><STRONG><a name="[cb]"></a>pcd_read_tag2_block</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Tag2_Test
</UL>

<P><STRONG><a name="[5f]"></a>NFC_A_Mifare_Test</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = NFC_A_Mifare_Test &rArr; pcd_auth_state &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[60]"></a>NFC_A_Tag1_Test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfid_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NFC_A_Tag1_Test &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[cf]"></a>NFC_A_Tag2_Test</STRONG> (Thumb, 36 bytes, Stack size 272 bytes, rfid_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read_tag2_block
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[94]"></a>pcd_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_reset &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init_lpcd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
</UL>

<P><STRONG><a name="[6d]"></a>pcd_antenna_on</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_antenna_on &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_typeA
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
</UL>

<P><STRONG><a name="[5a]"></a>pcd_antenna_off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_antenna_off &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Close
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init_LPCD
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[d0]"></a>pcd_sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[d1]"></a>pcd_sleep_exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[6c]"></a>pcd_config</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_config &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_typeA
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
</UL>

<P><STRONG><a name="[ca]"></a>pcd_com_transceive</STRONG> (Thumb, 1150 bytes, Stack size 56 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_bak_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write_ultralight
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_sr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sr176
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sr176
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr176
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_halt_b
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_slot_marker
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request_b
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_attri_b
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso14443_4_deselect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_transceive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idcard_num
</UL>

<P><STRONG><a name="[c6]"></a>pcd_set_tmo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_set_tmo &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_bak_value
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write_ultralight
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;completion_sr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protect_sr176
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sr176
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sr176
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sr
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_halt_b
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_slot_marker
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request_b
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_select
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_cascaded_anticoll
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_auth_state
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_attri_b
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso14443_4_deselect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_transceive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_hlta
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
</UL>

<P><STRONG><a name="[d2]"></a>pcd_delay_sfgi</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_delay_sfgi &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
</UL>

<P><STRONG><a name="[5c]"></a>pcd_set_rate</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pcd_set_rate &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active_b
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[d3]"></a>calculate_crc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>

<P><STRONG><a name="[d4]"></a>test_setagc_getadc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[b3]"></a>pcd_soft_poweroff_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pcd_soft_poweroff_init &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[b2]"></a>pcd_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sl2x23.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pcd_init &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init
</UL>

<P><STRONG><a name="[b4]"></a>pcd_init_lpcd</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_reset
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_Init_LPCD
</UL>

<P><STRONG><a name="[d5]"></a>print_lpcd_reg</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d6]"></a>print_all_reg</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, sl2x23.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[d7]"></a>lpcd_amp_test</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[71]"></a>osc_calib</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[d8]"></a>get_adc_value</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_agc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value_mean
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_calib
</UL>

<P><STRONG><a name="[d9]"></a>agc_calib</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
</UL>

<P><STRONG><a name="[da]"></a>adc_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_agc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
</UL>

<P><STRONG><a name="[72]"></a>lpcd_init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_calib
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_antenna_on
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[73]"></a>lpcd_entry</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[74]"></a>lpcd_exit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
</UL>

<P><STRONG><a name="[db]"></a>get_adc_value_mean</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[dc]"></a>test_agc</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[dd]"></a>test_lpcd_conf</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[de]"></a>lpcd_print</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lpcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6a]"></a>pcd_default_info</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iso14443_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pcd_default_info
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqb_wakeup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>ISO14443_4_HalfDuplexExchange</STRONG> (Thumb, 1216 bytes, Stack size 344 bytes, iso14443_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ISO14443_4_HalfDuplexExchange &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rfid_exchange
</UL>

<P><STRONG><a name="[c3]"></a>iso14443_4_deselect</STRONG> (Thumb, 54 bytes, Stack size 280 bytes, iso14443_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = iso14443_4_deselect &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iblock_getrand
</UL>

<P><STRONG><a name="[b5]"></a>pcd_request</STRONG> (Thumb, 104 bytes, Stack size 280 bytes, iso14443a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pcd_request &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
</UL>

<P><STRONG><a name="[b6]"></a>pcd_cascaded_anticoll</STRONG> (Thumb, 604 bytes, Stack size 320 bytes, iso14443a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = pcd_cascaded_anticoll &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
</UL>

<P><STRONG><a name="[b7]"></a>pcd_cascaded_select</STRONG> (Thumb, 142 bytes, Stack size 296 bytes, iso14443a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pcd_cascaded_select &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
</UL>

<P><STRONG><a name="[6f]"></a>pcd_hlta</STRONG> (Thumb, 88 bytes, Stack size 272 bytes, iso14443a.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
</UL>

<P><STRONG><a name="[c5]"></a>pcd_rats_a</STRONG> (Thumb, 472 bytes, Stack size 296 bytes, iso14443a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pcd_rats_a &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_delay_sfgi
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
</UL>

<P><STRONG><a name="[c7]"></a>pcd_pps_rate</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, iso14443a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pcd_pps_rate &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_rate
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
</UL>

<P><STRONG><a name="[ba]"></a>pcd_request_b</STRONG> (Thumb, 126 bytes, Stack size 288 bytes, iso14443b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = pcd_request_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqb_wakeup
</UL>

<P><STRONG><a name="[bb]"></a>pcd_slot_marker</STRONG> (Thumb, 118 bytes, Stack size 280 bytes, iso14443b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pcd_slot_marker &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqb_wakeup
</UL>

<P><STRONG><a name="[bd]"></a>pcd_attri_b</STRONG> (Thumb, 118 bytes, Stack size 296 bytes, iso14443b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pcd_attri_b &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active_b
</UL>

<P><STRONG><a name="[63]"></a>get_idcard_num</STRONG> (Thumb, 78 bytes, Stack size 280 bytes, iso14443b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = get_idcard_num &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[df]"></a>pcd_halt_b</STRONG> (Thumb, 54 bytes, Stack size 280 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[e0]"></a>select_sr</STRONG> (Thumb, 146 bytes, Stack size 280 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[e1]"></a>read_sr176</STRONG> (Thumb, 80 bytes, Stack size 280 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[e2]"></a>write_sr176</STRONG> (Thumb, 62 bytes, Stack size 280 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[e3]"></a>protect_sr176</STRONG> (Thumb, 60 bytes, Stack size 280 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[e4]"></a>completion_sr</STRONG> (Thumb, 44 bytes, Stack size 272 bytes, iso14443b.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
</UL>

<P><STRONG><a name="[cc]"></a>pcd_auth_state</STRONG> (Thumb, 118 bytes, Stack size 296 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = pcd_auth_state &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
</UL>

<P><STRONG><a name="[ce]"></a>pcd_read</STRONG> (Thumb, 102 bytes, Stack size 280 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pcd_read &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
</UL>

<P><STRONG><a name="[cd]"></a>pcd_write</STRONG> (Thumb, 226 bytes, Stack size 280 bytes, mifare.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = pcd_write &rArr; pcd_com_transceive &rArr; clear_bit_mask &rArr; write_reg &rArr; i2c_write_word &rArr; SL2x23_TIMEOUT_UserCallBack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBlock
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
</UL>

<P><STRONG><a name="[e5]"></a>pcd_write_ultralight</STRONG> (Thumb, 134 bytes, Stack size 280 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[e6]"></a>pcd_value</STRONG> (Thumb, 280 bytes, Stack size 288 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[e7]"></a>pcd_bak_value</STRONG> (Thumb, 312 bytes, Stack size 280 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_set_tmo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_com_transceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit_mask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit_mask
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>

<P><STRONG><a name="[e8]"></a>InitBlock</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, mifare.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_slot_marker
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_request_b
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443_4_HalfDuplexExchange
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_transceive
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtag_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_default_info
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[158]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[159]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[15b]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[5e]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_print
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_agc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adc_value_mean
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;agc_calib
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_reg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_lpcd_reg
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_rats_a
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_pps_rate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Tag2_Test
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_transceive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_typeA
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active_b
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqb_wakeup
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reqa_wakeup
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SL2x23_TIMEOUT_UserCallBack
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling_reqa
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_polling
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcd_active
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osc_calib
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_exit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Tag1_Test
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_A_Mifare_Test
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Iblock_getrand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication_Test
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpcd_demo
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo_user
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_demo
</UL>

<P><STRONG><a name="[15c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[4c]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[97]"></a>i2c_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sl2x23_iic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_NAck
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Ack
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_WaitAck
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>

<P><STRONG><a name="[f1]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[f3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
